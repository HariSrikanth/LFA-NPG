import matplotlib
import matplotlib.pyplot as plt
matplotlib.rcParams['mathtext.fontset'] = 'stix'
matplotlib.rcParams['font.family'] = 'STIXGeneral'
matplotlib.pyplot.title(r'ABC123 vs $\mathrm{ABC123}^{123}$')

import numpy as np


'''
Graphing Iterations vs Reward for TRPO, noise at 0, 10, 15, and 20% deviation; Acrobot simulation
'''

e = np.array([-500., -500., -500., -493.2, -471.133, -500.,
                            -500., -429.567, -458.367, -438.133, -454.533, -429.367,
                            -425.35, -443.15, -448.85, -467.167, -441.917, -428.,
                            -398.26, -422.533, -440.18, -407.8, -434.82, -435.533,
                            -414.067, -440.32, -426.333, -430.05, -420.413, -403.517,
                            -434.15, -413.483, -399.52, -399.74, -371.35, -417.317,
                            -417.183, -427.967, -394.157, -383.05, -358.333, -399.283,
                            -431.2, -398.333, -375.55, -393.6, -374.283, -353.8,
                            -342.283, -323.917, -341.667, -307.66, -357.4, -337.3,
                            -321.05, -308.78, -368.747, -331.947, -322.183, -282.613,
                            -280.157])
edev = np.array([100., 0., 0., 4.309, 28.867, 0., 0.,
                       34.065, 17.365, 39.908, 29.381, 42.724, 46.863, 56.85,
                       51.15, 21.06, 45.419, 51.071, 55.264, 52.886, 56.821,
                       64.713, 62.08, 61.767, 63.716, 58.192, 46., 53.05,
                       52.32, 50.492, 51.529, 49.66, 57.88, 56.36, 53.55,
                       55.15, 44.75, 26.7, 46.05, 56.112, 51.335, 31.526,
                       19.21, 33.313, 37.28, 36.835, 39.04, 47.274, 43.528,
                       39.262, 33.51, 47.235, 44.864, 34.283, 43.467, 51.897,
                       51.94, 49.142, 37.986, 53.616, 60.56]) / 2



c = np.array([-500.   , -496.1  , -500.   , -465.   , -468.267, -450.7  ,
       -416.483, -445.1  , -454.5  , -450.667, -424.233, -457.733,
       -459.933, -444.133, -453.1  , -469.2  , -460.367, -449.133,
       -439.3  , -425.867, -448.75 , -447.9  , -422.717, -458.933,
       -411.833, -427.933, -436.833, -461.05 , -437.22 , -427.733,
       -429.533, -405.533, -409.6  , -398.417, -401.66 , -380.6  ,
       -384.417, -404.25 , -384.12 , -401.12 , -386.52 , -412.32 ,
       -398.82 , -419.267, -378.45 , -408.8  , -371.607, -339.5  ,
       -354.793, -359.853, -367.48 , -388.083, -393.28 , -414.4  ,
       -398.65 , -392.87 , -373.12 , -352.693, -340.59 , -375.64 ,
       -391.2  ])
cdev = np.array([100.   ,   3.9  ,   0.   ,  35.   ,  29.694,  30.198,  41.552,
        38.109,  25.241,  27.933,  40.304,  13.467,  16.105,  22.384,
        32.596,  25.872,  26.346,  36.175,  40.807,  50.053,  51.25 ,
        52.1  ,  51.052,  25.297,  57.449,  44.464,  40.27 ,  38.95 ,
        54.342,  48.662,  46.867,  59.342,  37.589,  41.595,  53.784,
        49.053,  71.422,  58.906,  58.492,  63.764,  69.542,  60.073,
        62.856,  43.747,  75.235,  58.001,  60.139,  68.872,  72.055,
        70.926,  67.229,  70.338,  66.496,  59.497,  62.328,  65.659,
        78.014,  71.606,  70.225,  71.764,  66.179]) / 2

d = np.array([-500.   , -500.   , -496.7  , -489.2  , -480.333, -488.9  ,
       -462.6  , -495.2  , -446.867, -500.   , -480.1  , -486.8  ,
       -462.1  , -478.033, -435.2  , -448.067, -428.   , -436.8  ,
       -425.8  , -425.5  , -386.75 , -427.333, -398.4  , -348.633,
       -371.683, -385.95 , -427.367, -394.69 , -361.593, -426.08 ,
       -418.2  , -425.733, -359.133, -408.7  , -367.367, -361.733,
       -378.947, -381.34 , -384.8  , -382.1  , -381.167, -412.333,
       -378.73 , -386.087, -380.12 , -384.283, -384.733, -409.9  ,
       -360.49 , -377.867, -379.773, -364.936, -373.667, -367.283,
       -393.28 , -411.907, -396.95 , -408.613, -397.54 , -381.4  ,
       -396.383])
ddev = np.array([100.   ,   0.   ,   3.3  ,  10.8  ,  19.667,  11.1  ,  30.8  ,
         4.8  ,  51.646,   0.   ,  14.569,  13.2  ,  23.765,   9.484,
        31.693,  19.805,  31.417,  27.268,  44.4  ,  29.186,  42.052,
        18.421,  44.118,  50.29 ,  48.602,  46.358,  37.197,  48.457,
        55.047,  61.532,  64.1  ,  67.667,  68.648,  62.8  ,  69.201,
        64.974,  62.98 ,  73.032,  54.972,  72.782,  61.637,  64.937,
        55.897,  52.626,  65.459,  56.021,  56.559,  64.355,  59.095,
        51.549,  62.043,  68.272,  52.882,  67.558,  65.941,  56.543,
        63.161,  58.252,  63.151,  72.641,  64.449]) / 2

a = np.array([-500.   , -500.   , -481.4  , -448.65 , -500.   , -489.1  ,
       -478.3  , -491.533, -500.   , -469.7  , -470.3  , -450.   ,
       -453.867, -433.2  , -441.367, -436.167, -431.733, -436.5  ,
       -435.733, -391.5  , -396.867, -389.967, -382.483, -396.05 ,
       -357.513, -368.417, -401.083, -386.317, -379.533, -381.193,
       -364.567, -335.267, -329.87 , -321.017, -360.383, -310.883,
       -300.283, -275.817, -317.65 , -296.867, -284.1  , -286.367,
       -295.35 , -294.23 , -245.723, -260.1  , -254.7  , -290.493,
       -266.55 , -307.513, -285.083, -259.29 , -280.773, -294.183,
       -326.267, -324.533, -242.827, -280.867, -260.573, -292.073,
       -283.06 ])
adev = np.array([100.   ,   0.   ,  18.6  ,  43.144,   0.   ,  10.9  ,  16.751,
         8.467,   0.   ,  25.1  ,  29.7  ,  42.4  ,  19.94 ,  27.937,
        28.421,  36.574,  36.63 ,  35.534,  36.923,  36.45 ,  36.021,
        41.937,  49.762,  38.579,  52.179,  45.755,  51.306,  54.379,
        54.767,  51.95 ,  49.842,  40.353,  48.342,  49.583,  47.262,
        41.07 ,  43.112,  45.37 ,  44.124,  40.613,  46.207,  46.969,
        48.555,  47.065,  53.708,  57.172,  49.403,  44.737,  50.984,
        40.351,  50.933,  57.026,  44.898,  45.893,  57.304,  56.279,
        59.246,  61.584,  76.143,  71.264,  55.974]) / 2

iter = np.arange(61)

plt.plot(iter, a, '-', c='blue', label='Noise=0')
#plt.plot(iter, b, '-', c='green', label='Noise=5')
plt.plot(iter, c, '--', c='green', label='Noise=10')
plt.plot(iter, d, '-.', c='orange', label='Noise=15')
plt.plot(iter, e, ':', c='red', label='Noise=20')
plt.fill_between(iter, a - adev, a + adev, alpha=0.2, color='blue')
#plt.fill_between(iter, b - bdev, b + bdev, alpha=0.2, color='green')
plt.fill_between(iter, c - cdev, c + cdev, alpha=0.2, color='green')
plt.fill_between(iter, d - ddev, d + ddev, alpha=0.2, color='orange')
plt.fill_between(iter, e - edev, e + edev, alpha=0.2, color='red')
plt.legend(loc='lower right')
plt.rcParams["font.family"] = "serif"
plt.grid()
plt.title('Average Reward of TRPO Over Policy iterations', fontsize=20)
plt.xlabel('Number of Policy Iterations', fontsize=20)
plt.ylabel('Average Reward', fontsize=20)

plt.ylim(-500, -200)

plt.show()

